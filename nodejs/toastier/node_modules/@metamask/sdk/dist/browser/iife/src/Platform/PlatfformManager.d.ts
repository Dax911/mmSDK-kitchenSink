import { PlatformType } from '@metamask/sdk-communication-layer';
import { WakeLockStatus } from '../types/WakeLockStatus';
interface PlatformProps {
    useDeepLink: boolean;
    preferredOpenLink?: (link: string, target?: string) => void;
    wakeLockStatus?: WakeLockStatus;
    debug?: boolean;
}
export declare class PlatformManager {
    private wakeLock;
    private wakeLockStatus;
    private wakeLockTimer?;
    private wakeLockFeatureActive;
    private platformType;
    private useDeeplink;
    private preferredOpenLink?;
    private debug;
    constructor({ useDeepLink, preferredOpenLink, wakeLockStatus, debug, }: PlatformProps);
    enableWakeLock(): void;
    disableWakeLock(): void;
    openDeeplink(universalLink: string, deeplink: string, target?: string): void;
    isReactNative(): boolean;
    isMetaMaskInstalled(): boolean;
    isDesktopWeb(): boolean;
    isMobile(): boolean;
    isSecure(): boolean;
    isMetaMaskMobileWebView(): boolean;
    isMobileWeb(): boolean;
    isNotBrowser(): boolean;
    isNodeJS(): boolean;
    isBrowser(): boolean;
    isUseDeepLink(): boolean;
    getPlatformType(): PlatformType;
}
export {};
//# sourceMappingURL=PlatfformManager.d.ts.map